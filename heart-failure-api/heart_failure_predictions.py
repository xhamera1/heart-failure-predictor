# -*- coding: utf-8 -*-
"""heart_failure_predictions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P2oo1t38YlK1EUxIqxc7wDGNlo_nUdgZ
"""

import pandas as pd
import numpy as np

df = pd.read_csv('heart.csv')
print(df.head())

print(df.info())

X = df.drop(columns = 'HeartDisease')
y = df['HeartDisease']
print(X)
print(y)

from sklearn.preprocessing import OrdinalEncoder

encoder = OrdinalEncoder()

X['Sex'] = encoder.fit_transform(X[['Sex']])
X['ChestPainType'] = encoder.fit_transform(X[['ChestPainType']])
X['RestingECG'] = encoder.fit_transform(X[['RestingECG']])
X['ExerciseAngina'] = encoder.fit_transform(X[['ExerciseAngina']])
X['ST_Slope'] = encoder.fit_transform(X[['ST_Slope']])
print(X)

missing_counts = df.isnull().sum()

print("Liczba brakujących wartości w każdej kolumnie:")
print(missing_counts)

from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

tree_clf = DecisionTreeClassifier()

param_grid = {
    'max_depth' : [1,2,3,4,5,6,7,8,9]
}

search = GridSearchCV(
    tree_clf,
    param_grid=param_grid,
    scoring='f1',
    n_jobs=-1
)

search.fit(X_train, y_train)
print(search.best_params_)
print(search.best_estimator_)



import graphviz
import matplotlib.pyplot as plt
from sklearn.tree import export_graphviz

f = "heart_failure.dot"

export_graphviz(
    search.best_estimator_,
    feature_names=X.columns,
    class_names=['healthy', 'diseased'],
    out_file=f,
    rounded=True,
    filled=True
)

graph = graphviz.Source.from_file(f)
graph.render("heart_failure", format="png")

import matplotlib.image as mpimg

img = mpimg.imread("heart_failure.png")
plt.figure(figsize=(10, 8))
plt.imshow(img)
plt.axis('off')
plt.show()

from sklearn.metrics import accuracy_score

tree_clf_best = search.best_estimator_

# print(tree_clf_best)
tree_acc_train = accuracy_score(y_train, tree_clf_best.predict(X_train))
tree_acc_test = accuracy_score(y_test, tree_clf_best.predict(X_test))

print("Decision tree accuracy train : ", tree_acc_train)
print("Decision tree accuracy test  : ", tree_acc_test)

from sklearn.ensemble import RandomForestClassifier

rand_forest_clf = RandomForestClassifier(
    n_estimators=50
)

rand_forest_clf.fit(X_train, y_train)

forest_acc_train = accuracy_score(y_train, rand_forest_clf.predict(X_train))
forest_acc_test = accuracy_score(y_test, rand_forest_clf.predict(X_test))

print("Random forest accuracy train : ", forest_acc_train)
print("Random forest accuracy test  : ", forest_acc_test)

from sklearn.ensemble import AdaBoostClassifier

ada_boost_clf = AdaBoostClassifier(
    DecisionTreeClassifier(),
    n_estimators=50
)
ada_boost_clf.fit(X_train, y_train)

ada_acc_train = accuracy_score(y_train, ada_boost_clf.predict(X_train))
ada_acc_test = accuracy_score(y_test, ada_boost_clf.predict(X_test))

print("Ada boost accuracy train : ", ada_acc_train)
print("Ada boost accuracy test  : ", ada_acc_test)

from sklearn.ensemble import GradientBoostingClassifier

grad_boost_clf = GradientBoostingClassifier( # nie trzeba podawac ze DecisionTreeClassifier
    n_estimators=50
)
grad_boost_clf.fit(X_train, y_train)

grad_acc_train = accuracy_score(y_train, grad_boost_clf.predict(X_train))
grad_acc_test = accuracy_score(y_test, grad_boost_clf.predict(X_test))

print("Gradient boosting accuracy train : ", grad_acc_train)
print("Gradient boosting accuracy test  : ", grad_acc_test)

import pickle

with open('random_forest_model.pkl', 'wb') as file:
  pickle.dump(rand_forest_clf, file)

with open('grad_boost_clf.pkl', 'wb') as file:
      pickle.dump(grad_boost_clf, file)